/**
 * IMPA - Fluid Dynamics Laboratory
 *
 * RPn Project
 *
 * @(#) Quad2FluxFunction.cc
 **/

/*
 * ---------------------------------------------------------------
 * Includes:
 */
#include "Quad2FluxFunction.h"
#include <math.h>

/*
 * ---------------------------------------------------------------
 * Definitions:
 */

Quad2FluxFunction::Quad2FluxFunction(const Quad2FluxParams & params) :
	params_(params)
{
}

int Quad2FluxFunction::f(const RealVector & x, RealVector & y) {

	double a1, b1, c1, d1, e1, a2, b2, c2, d2, e2, u, v, out[2];

	u = x.component(0);
	v = x.component(1);

	/* 
	 * a1=params_.getParams().getElement(0);
	 * b1=params_.getParams().getElement(1);
	 * c1=params_.getParams().getElement(2);
	 * d1=params_.getParams().getElement(3);
	 * e1=params_.getParams().getElement(4);
	 * a2=params_.getParams().getElement(5);
	 * b2=params_.getParams().getElement(6);
	 * c2=params_.getParams().getElement(7);
	 * d2=params_.getParams().getElement(8);
	 * e2=params_.getParams().getElement(9);
	 */

	a1 = -1.0;
	b1 = 0.0;
	c1 = 1.0;
	d1 = 0.0;
	e1 = 0.0;

	a2 = 1.0;
	b2 = 1.0;
	c2 = 0.0;
	d2 = 0.0;
	e2 = 0.0;

//TODO: To implement exception - daniel@impa.br
//!	try {
		out[1] = 0.5 * ( a1*pow(u,(double)2) + 2.0*b1*u*v + c1*pow(v,(double)2) ) + d1*u + e1*v;
		out[2] = 0.5 * ( a2*pow(u,(double)2) + 2.0*b2*u*v + c2*pow(v,(double)2) ) + d2*u + e2*v;
//!	} catch (Exception e) {
//!		e.printStackTrace();
//!	}

	y = RealVector(2,out);

	return OK;
}

int Quad2FluxFunction::df(const RealVector & x,Jacobian & y) {

        double a1, b1, c1, d1, e1, a2, b2, c2, d2, e2, u, v,  out00, out01, out10, out11;
        
        u = x.component(0);
	v = x.component(1);	
		
	a1 = -1.0;
	b1 = 0.0;
	c1 = 1.0;
	d1 = 0.0;
	e1 = 0.0;
	a2 = 1.0;
	b2 = 1.0;
	c2 = 0.0;
	d2 = 0.0;
	e2 = 0.0;
    	
        out00 = a1*u + b1*v + d1;    	
        out01 = b1*u + c1*v + e1;    	
	out10 = a2*u + b2*v + d2;		
	out11 = b2*u + c2*v + e2;
		
	y(0, 0) = out00;
	y(0, 1) = out01;
	y(1, 0) = out10;
	y(1, 1) = out11;
        
	return OK;
}

int Quad2FluxFunction::d2f(const RealVector & x, HessianMatrix & y) {

	HessianMatrix h(8);
	double a1, b1, c1, d1, e1, a2, b2, c2, d2, e2, u, v, *out;

	out = new double[8];

	u = x.component(0);
	v = x.component(1);

	a1 = params_.component(0);
	b1 = params_.component(1);
	c1 = params_.component(2);
	d1 = params_.component(3);
	e1 = params_.component(4);
	a2 = params_.component(5);
	b2 = params_.component(6);
	c2 = params_.component(7);
	d2 = params_.component(8);
	e2 = params_.component(9);

	out[0] = a1;
	out[1] = b1;
	out[2] = b1;
	out[3] = c1;
	out[4] = a2;
	out[5] = b2;
	out[6] = b2;
	out[7] = c2;

	h.setElement(0,0,0,out[0]);
	h.setElement(1,0,0,out[1]);
	h.setElement(0,1,0,out[2]);
	h.setElement(1,1,0,out[3]);
	h.setElement(0,0,1,out[4]);
	h.setElement(1,0,1,out[5]);
	h.setElement(0,1,1,out[6]);
	h.setElement(1,1,1,out[7]);

	y = h;

	return OK;
}

FluxParams Quad2FluxFunction::fluxParams(void) 
{
	return params_;
}


