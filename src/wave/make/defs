#
#	defs -- makefile macro definitions and implicit rules
#

SUFFIXES = .o .c .cc .F .f90 .F90
.SUFFIXES:
.SUFFIXES: $(SUFFIXES)

DEBUGFLAG =

#
#	C definitions
#
ifeq ($(RPGNU),)
CC = cc
CPP = cc -E
else
CC = gcc -ansi -Wall
CPP = gcc -E
endif
CFLAGS =
CPPFLAGS =
COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(DEBUGFLAG) -c
LINK.c = $(CC) $(CFLAGS) $(DEBUGFLAG) $(LDFLAGS)
ifeq ($(RPGNU),)
ifeq ($(RPHOSTTYPE),solaris)
	DEPEND.c = $(CC) $(CPPFLAGS) -xM
endif
ifeq ($(RPHOSTTYPE),solaris_i86)
	DEPEND.c = $(CC) $(CPPFLAGS) -H -P
endif
ifeq ($(RPHOSTTYPE),mips)
	DEPEND.c = $(CC) $(CPPFLAGS) -M
endif
ifeq ($(RPHOSTTYPE),sun4)
	DEPEND.c = $(CC) $(CPPFLAGS) -H -P
endif
else
	DEPEND.c = $(CC) $(CPPFLAGS) -M
endif
.c:
	$(LINK.c) -o $@ $< $(LDLIBS)
%.o: %.c
	$(COMPILE.c) $<
.c.a:
	$(COMPILE.c) -o $% $<
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%
(%.o): %.c
	$(COMPILE.c) -o $% $<
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%

#
#	C++ definitions
#
ifeq ($(RPGNU),)
ifeq ($(RPHOSTTYPE),osf_alpha)
CCC = cxx
else
CCC = CC
endif
else
CCC = c++ -Wall -Wno-deprecated
endif
ifeq ($(RPHOSTTYPE),solaris)
# The -D_XOPEN_SOURCE flag is needed if __SUNPRO_CC == 0x540
# because, without it, math.h defines struct exception.
CCFLAGS = -D_XOPEN_SOURCE
else
CCFLAGS =
endif
CPPFLAGS +=
COMPILE.cc = $(CCC) $(CCFLAGS) $(CPPFLAGS) $(DEBUGFLAG) -c
LINK.cc = $(CCC) $(CCFLAGS) $(DEBUGFLAG) $(LDFLAGS)
ifeq ($(RPGNU),)
ifeq ($(RPHOSTTYPE),solaris)
	DEPEND.cc = $(CCC) $(CPPFLAGS) -xM
endif
ifeq ($(RPHOSTTYPE),solaris_i86)
	DEPEND.cc = $(CCC) $(CPPFLAGS) -H -P
endif
ifeq ($(RPHOSTTYPE),mips)
	DEPEND.cc = $(CCC) $(CPPFLAGS) -M
endif
ifeq ($(RPHOSTTYPE),sun4)
	DEPEND.cc = $(CCC) $(CPPFLAGS) -H -P
endif
else
ifeq ($(RPHOSTTYPE),solaris)
	# avoid definition of exception in math.h on Solaris
	CPPFLAGS += -D_XOPEN_SOURCE
endif
	DEPEND.cc = $(CCC) $(CPPFLAGS) -M
endif
.cc:
	$(LINK.cc) -o $@ $< $(LDLIBS)
.cc.o:
	$(COMPILE.cc) $<
.cc.a:
	$(COMPILE.cc) -o $% $<
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%
(%.o): %.cc
	$(COMPILE.cc) -o $% $<
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%

# default linker is C++
%: %.o
	$(LINK.cc) -o $@ $< $(LDLIBS)

#
#	FORTRAN 77 definitions
#
ifeq ($(RPGNU),)
FC = f77
ifeq ($(RPHOSTTYPE),osf_alpha)
FLIBS = -L/usr/ccs/lib/cmplrs/fortrtl_331 -lfor
endif
ifeq ($(RPHOSTTYPE),mips)
FLIBS = -lftn
endif
ifeq ($(RPHOSTTYPE),sun4)
FLIBS = -L/usr/lang/SC1.0 -lF77
endif
ifeq ($(RPHOSTTYPE),solaris)
FLIBS = -lF77 -lM77
endif
ifeq ($(RPHOSTTYPE),solaris_i86)
FLIBS = -L/opt/SUNWspro/SC1.0 -lF77 -lM77
endif
else
FC = g77 -Wall
FLIBS = -lg2c
endif
FFLAGS = -u -C
CPPFLAGS +=
COMPILE.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(DEBUGFLAG) -c
LINK.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(DEBUGFLAG) $(LDFLAGS)
ifeq ($(RPGNU),)
ifeq ($(RPHOSTTYPE),solaris)
	DEPEND.F = cpp -E $(CPPFLAGS) -M
endif
ifeq ($(RPHOSTTYPE),solaris_i86)
	DEPEND.F = cpp -E $(CPPFLAGS) -M
endif
ifeq ($(RPHOSTTYPE),mips)
	DEPEND.F = $(FC) $(CPPFLAGS) -M
endif
else
	DEPEND.F = $(FC) $(CPPFLAGS) -M
endif

.F:
	$(LINK.F) -o $@ $< $(LDLIBS)
%.o: %.F
	$(COMPILE.F) $<
.F.a:
	$(COMPILE.F) -o $% $<
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%
(%.o): %.F
	$(COMPILE.F) -o $% $<
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%


#
#     FORTRAN 90 definitions
#
F90C = f90
F90FLAGS =
CPPFLAGS +=
COMPILE.F90 = $(F90C) $(F90FLAGS) $(CPPFLAGS) $(DEBUGFLAG) -c
LINK.F90 = $(F90C) $(F90FLAGS) $(CPPFLAGS) $(DEBUGFLAG) $(LDFLAGS)
ifeq ($(RPGNU),)
ifeq ($(RPHOSTTYPE),solaris)
	DEPEND.F90 = cpp -E $(CPPFLAGS) -M
endif
ifeq ($(RPHOSTTYPE),solaris_i86)
	DEPEND.F90 = $(F90C) $(CPPFLAGS) -H -P
endif
ifeq ($(RPHOSTTYPE),mips)
	DEPEND.F90 = $(F90C) $(CPPFLAGS) -M
endif
else
	DEPEND.F90 = $(F90C) $(CPPFLAGS) -M
endif
.F90:
	$(LINK.F90) -o $@ $< $(LDLIBS)
%.o: %.F90
	$(COMPILE.F90) $<
.F90.a:
	$(COMPILE.F90) -o $% $<
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%
(%.o): %.F90
	$(COMPILE.F90) -o $% $<
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%
.f90:
	$(LINK.F90) -o $@ $< $(LDLIBS)
%.o: %.f90
	$(COMPILE.F90) $<
.f90.a:
	$(COMPILE.F90) -o $% $<
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%
(%.o): %.f90
	$(COMPILE.F90) -o $% $<
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%


#
#	Definitions for cleaning
#
CLEAN = rm -f
CLEANSRC = $(OBJDIR)/*.[ado]

#
#	Definitions for printing
#
PRINT = lpr -p
PRINTSRC = makefile *.[hcF]*

#
#	Definitions for tags
#
TAGS = ctags
TAGSFLAGS = -t
TAGSFILE = tags
TAGSSRC = *.[hcF]*

#
#	Tar definitions
#
TAR = tar
TARDIR = .
TARFLAGS = cf
TARSRC = makefile* *.[hcfF]*

#
#	Linker definitions
#
LD = ld
LDFLAGS =
LDLIBS =

#
#	Archiver definitions
#
AR = ar
ARFLAGS = r
RANLIB = ranlib

#
#	Miscellaneous definitions
#
MAKE = make
RM = rm -f

#
#	Location for object, archive, and dependency files
#
OBJDIR = $(RPHOSTTYPE)

#
# The following environment variables are assumed:
#
#	RPHOSTTYPE
#	WAVEDIR
#	X11DIR
#
#	GLDIR		(if RPGL is set to opengl or mesa)
#	XGLDIR		(if RPGL is set to xgl)
#	XVIEWDIR	(if RPGUI is set to xview)
#
#
# Set following environment variables.
#
#	RPGUI 		-- xview or fltk
#	RPGL 		-- xgl 		   (if RPGUI is xview),
#			   opengl, mesa    (if RPGUI is fltk)
#			   or microsoft    (if RPGUI is fltk & under MS-Windows)
#	RPGNU		-- yes 		   (ONLY if you want GNU compilers;
#                                           otherwise, leave undefined)
#

#
#	Library locations
#

       FLTKDIR = $(WAVEDIR)/fltk
    GRAPHGLDIR = $(WAVEDIR)/graphGL
   GRAPHXGLDIR = $(WAVEDIR)/graphXGL
    GUIFLTKDIR = $(WAVEDIR)/guiFLTK
      GUIXVDIR = $(WAVEDIR)/guiXV
GUIIZERFLTKDIR = $(WAVEDIR)/guiizerFLTK
  GUIIZERXVDIR = $(WAVEDIR)/guiizerXV
     MULTIDDIR = $(WAVEDIR)/multid
    OMNIORBDIR = $(WAVEDIR)/omniORB2
      WUTILDIR = $(WAVEDIR)/wutil
       XGKSDIR = $(WAVEDIR)/xgks

ifeq ($(RPGUI),fltk)
include $(FLTKDIR)/defs
include $(GUIFLTKDIR)/defs
include $(GUIIZERFLTKDIR)/defs
else
include $(GUIXVDIR)/defs
include $(GUIIZERXVDIR)/defs
endif

ifeq ($(RPGL),xgl)
include $(GRAPHXGLDIR)/defs
else
include $(GRAPHGLDIR)/defs
endif

include $(OMNIORBDIR)/defs

include $(XGKSDIR)/defs

include $(MULTIDDIR)/defs

include $(WUTILDIR)/defs


#
#	System Library locations
#

SYSLIBS = -lm

ifeq ($(RPGL),mesa)
ifneq ($(GLDIR),/usr)
	GLINC = -I$(GLDIR)/include
endif
GLLIB = $(GLDIR)/lib/libMesaGL.a $(GLDIR)/lib/libMesaGLU.a
GLLIBS = -L$(GLDIR)/lib -lMesaGL -lMesaGLU
else
ifeq ($(RPGL),microsoft)
GLINC =
GLLIB =
GLLIBS = -lopengl32 -lglu32
else
ifneq ($(GLDIR),/usr)
	GLINC = -I$(GLDIR)/include
endif
GLLIB = $(GLDIR)/lib/libGL.so $(GLDIR)/lib/libGLU.so
GLLIBS = -L$(GLDIR)/lib -lGL -lGLU
endif
endif

ifneq ($(RPHOSTTYPE),mingw32)
X11INC = -I$(X11DIR)/include
X11LIB = $(X11DIR)/lib/libX11.so
ifeq ($(RPHOSTTYPE),mips)
X11LIBS = -lX11 -lXext
else
X11LIBS = -L$(X11DIR)/lib -lX11 -lXext
endif
else
X11INC =
X11LIB =
X11LIBS = -lgdi32 -luser32 -lmsvcrt -lwsock32 -lm -mno-cygwin
endif

XGLINC = -I$(XGLDIR)/include
XGLLIB = $(XGLDIR)/lib/libxgl.so
XGLLIBS = -L$(XGLDIR)/lib -lxgl

ifeq ($(RPHOSTTYPE),mips)
XVIEWINC = -I/usr/local/include/X11
else
XVIEWINC = -I$(XVIEWDIR)/include
endif
XVIEWLIB = $(XVIEWDIR)/lib/libxview.so $(XVIEWDIR)/lib/libolgx.so
XVIEWLIBS = -L$(XVIEWDIR)/lib -lxview -lolgx


.PRECIOUS: $(WUTILLIB) $(GUILIB) $(GRAPHLIB) $(MULTIDLIB)
